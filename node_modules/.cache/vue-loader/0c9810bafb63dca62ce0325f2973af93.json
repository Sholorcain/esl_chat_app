{"remainingRequest":"C:\\Users\\Shane\\Desktop\\chat-app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Shane\\Desktop\\chat-app\\src\\App.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Shane\\Desktop\\chat-app\\src\\App.vue","mtime":1596644476201},{"path":"C:\\Users\\Shane\\Desktop\\chat-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1596558536928},{"path":"C:\\Users\\Shane\\Desktop\\chat-app\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Shane\\Desktop\\chat-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1596558536928},{"path":"C:\\Users\\Shane\\Desktop\\chat-app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport MessageInput from \"./components/MessageInput.vue\";\nimport Messages from \"./components/Messages.vue\";\nimport NavBar from \"./components/NavBar.vue\";\nimport Login from \"./components/Login.vue\";\nimport Users from \"./components/Users.vue\";\nimport Topic from \"./components/Topic.vue\";\nimport Pusher from \"pusher-js\";\n\n// Declare pusher variable so it's global to this file.\nlet pusher;\n\nexport default {\n  name: \"app\",\n  components: {\n    MessageInput,\n    NavBar,\n    Messages,\n    Users,\n    Login,\n    Topic\n  },\n      data: function() {\n        return {\n          authenticated: false,\n          messages: {},\n          users: [],\n          active_chat_id: null,\n          active_chat_index: null,\n          logged_user_id: null,\n          logged_user_username: null,\n          current_chat_channel: null\n        };\n      },\n      methods: {\n        async setAuthenticated(login_status, user_data) {\n\n          // Update the states\n          this.logged_user_id = user_data.id;\n          this.logged_user_username = user_data.username;\n          this.authenticated = login_status;\n          this.token = user_data.token;\n\n          // Initialize Pusher JavaScript library\n          pusher = new Pusher(process.env.VUE_APP_PUSHER_KEY, {\n              cluster: process.env.VUE_APP_PUSHER_CLUSTER,\n              authEndpoint: \"/api/pusher/auth\",\n              auth: {\n                headers: {\n                  Authorization: \"Bearer \" + this.token\n                }\n              }\n          });\n\n          // Get all the users from the server\n          const users = await this.axios.get(\"/api/users\", {\n            headers: { Authorization: \"Bearer \" + this.token }\n          });\n\n          // Get all users excluding the current logged user\n          this.users = users.data.filter(\n            user => user.userName != user_data.username\n          );\n          var notifications = pusher.subscribe(\n            `private-notification_user_${this.logged_user_id}`\n          );\n\n          notifications.bind(\"new_chat\", data => {\n            const isSubscribed = pusher.channel(data.channel_name);\n            if (!isSubscribed) {\n              const one_on_one_chat = pusher.subscribe(data.channel_name);\n\n              this.$set(this.messages, data.channel_name, []);\n\n              one_on_one_chat.bind(\"new_message\", data => {\n                // Check if the current chat channel is where the message is coming from\n                if (\n                  data.channel !== this.current_chat_channel &&\n                  data.from_user !== this.logged_user_id\n                ) {\n                  // Get the index of the user that sent the message\n                  const index = this.users.findIndex(\n                    user => user.id == data.from_user\n                  );\n                  // Set the has_new_message status of the user to true\n                  this.$set(this.users, index, {\n                    ...this.users[index],\n                    has_new_message: true\n                  });\n                }\n\n                this.messages[data.channel].push({\n                  message: data.message,\n                  from_user: data.from_user,\n                  to_user: data.to_user,\n                  channel: data.channel\n                });\n              });\n            }\n          });\n\n                var presenceChannel = pusher.subscribe(\"presence-chitchat\");\n\n                presenceChannel.bind(\"pusher:member_added\", data => {\n                  // Get the index of user that just scubscribed\n                  const index = this.users.findIndex(user => user.id == data.id);\n\n                  // Set the is_online status of the user to true\n                  this.$set(this.users, index, { ...this.users[index], is_online: true });\n                });\n\n                presenceChannel.bind(\"pusher:member_removed\", data => {\n                  // Get the index of user that just subscribed\n                  const index = this.users.findIndex(user => user.id == data.id);\n\n                  // Set the is_online status of the user to false\n                  this.$set(this.users, index, {\n                    ...this.users[index],\n                    is_online: false\n                  });\n                });\n\n                presenceChannel.bind(\"pusher:subscription_succeeded\", data => {\n                  // Fetch members already on this channel, then set them to be online\n                  for (let member_id of Object.keys(data.members)) {\n                    const index = this.users.findIndex(user => user.id == member_id);\n                    this.$set(this.users, index, {\n                      ...this.users[index],\n                      is_online: true\n                    });\n                  }\n                });\n\n        },\n        getMessage: function(channel_name) {\n          this.axios\n            .get(`/api/get_message/${channel_name}`, {\n              headers: { Authorization: \"Bearer \" + this.token }\n            })\n            .then(response => {\n              this.$set(this.messages, channel_name, response.data);\n            });\n        },\n        chat: function(id) {\n          this.active_chat_id = id;\n\n          // Get index of the current chatting user...\n          this.active_chat_index = this.users.findIndex(\n            user => user.id == this.active_chat_id\n          );\n\n          // Set the has_new_message status of the user to true\n          this.$set(this.users, this.active_chat_index, {\n            ...this.users[this.active_chat_index],\n            has_new_message: false\n          });\n\n          this.axios\n            .post(\n              \"/api/request_chat\",\n              {\n                from_user: this.logged_user_id,\n                to_user: this.active_chat_id\n              },\n              { headers: { Authorization: \"Bearer \" + this.token } }\n            )\n            .then(response => {\n              this.users[this.active_chat_index][\"channel_name\"] =\n                response.data.channel_name;\n\n              this.current_chat_channel = response.data.channel_name;\n\n              // Get messages on this channel\n              this.getMessage(response.data.channel_name);\n\n              var isSubscribed = pusher.channel(response.data.channel_name);\n\n              if (!isSubscribed) {\n                var channel = pusher.subscribe(response.data.channel_name);\n\n                this.$set(this.messages, response.data.channel_name, []);\n\n                channel.bind(\"new_message\", data => {\n                 //Check if the current chat channel is where the message is comming from\n                  if (\n                    data.channel !== this.current_chat_channel &&\n                    data.from_user !== this.logged_user_id\n                  ) {\n                    // Set the has_new_message status of the user to true\n                    this.$set(this.users, this.active_chat_index, {\n                      ...this.users[this.active_chat_index],\n                      has_new_message: true\n                    });\n                  }\n\n                  this.messages[response.data.channel_name].push({\n                    message: data.message,\n                    from_user: data.from_user,\n                    to_user: data.to_user,\n                    channel: data.channel\n                  });\n                });\n              }\n            })\n            .catch(function(error) {\n              console.log(error);\n            });\n        },\n\n        send_message: function(message) {\n          this.axios.post(\n            \"/api/send_message\",\n            {\n              from_user: this.logged_user_id,\n              to_user: this.active_chat_id,\n              message: message,\n              channel: this.current_chat_channel\n            },\n            { headers: { Authorization: \"Bearer \" + this.token } }\n          );\n        },\n\n        },\n\n    };\n",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <Login v-if=\"!authenticated\" v-on:authenticated=\"setAuthenticated\" />\n    <b-container v-else>\n      <NavBar :logged_user=\"logged_user_username\" />\n      <b-row class=\"main-area\">\n        <b-col cols=\"3\" class=\"users\">\n          <Users :users=\"users\" v-on:chat=\"chat\" />\n          <Topic />\n        </b-col>\n        <b-col cols=\"9\" class=\"messages-area\">\n          <div class=\"messages-main\">\n            <div \n              v-if=\"!current_chat_channel\"\n              class=\"select-chat text-center\"\n            >\n              Select a user to start chatting, and click \"generate topic\" to select your conversation topic!\n            </div>\n            <Messages \n              v-else \n              :active_chat=\"active_chat_id\" \n              :messages=\"messages[current_chat_channel]\"\n            />\n          </div>\n          <MessageInput v-on:send_message=\"send_message\" />\n        </b-col>\n      </b-row>\n    </b-container>\n  </div>\n</template>\n\n<script>\nimport MessageInput from \"./components/MessageInput.vue\";\nimport Messages from \"./components/Messages.vue\";\nimport NavBar from \"./components/NavBar.vue\";\nimport Login from \"./components/Login.vue\";\nimport Users from \"./components/Users.vue\";\nimport Topic from \"./components/Topic.vue\";\nimport Pusher from \"pusher-js\";\n\n// Declare pusher variable so it's global to this file.\nlet pusher;\n\nexport default {\n  name: \"app\",\n  components: {\n    MessageInput,\n    NavBar,\n    Messages,\n    Users,\n    Login,\n    Topic\n  },\n      data: function() {\n        return {\n          authenticated: false,\n          messages: {},\n          users: [],\n          active_chat_id: null,\n          active_chat_index: null,\n          logged_user_id: null,\n          logged_user_username: null,\n          current_chat_channel: null\n        };\n      },\n      methods: {\n        async setAuthenticated(login_status, user_data) {\n\n          // Update the states\n          this.logged_user_id = user_data.id;\n          this.logged_user_username = user_data.username;\n          this.authenticated = login_status;\n          this.token = user_data.token;\n\n          // Initialize Pusher JavaScript library\n          pusher = new Pusher(process.env.VUE_APP_PUSHER_KEY, {\n              cluster: process.env.VUE_APP_PUSHER_CLUSTER,\n              authEndpoint: \"/api/pusher/auth\",\n              auth: {\n                headers: {\n                  Authorization: \"Bearer \" + this.token\n                }\n              }\n          });\n\n          // Get all the users from the server\n          const users = await this.axios.get(\"/api/users\", {\n            headers: { Authorization: \"Bearer \" + this.token }\n          });\n\n          // Get all users excluding the current logged user\n          this.users = users.data.filter(\n            user => user.userName != user_data.username\n          );\n          var notifications = pusher.subscribe(\n            `private-notification_user_${this.logged_user_id}`\n          );\n\n          notifications.bind(\"new_chat\", data => {\n            const isSubscribed = pusher.channel(data.channel_name);\n            if (!isSubscribed) {\n              const one_on_one_chat = pusher.subscribe(data.channel_name);\n\n              this.$set(this.messages, data.channel_name, []);\n\n              one_on_one_chat.bind(\"new_message\", data => {\n                // Check if the current chat channel is where the message is coming from\n                if (\n                  data.channel !== this.current_chat_channel &&\n                  data.from_user !== this.logged_user_id\n                ) {\n                  // Get the index of the user that sent the message\n                  const index = this.users.findIndex(\n                    user => user.id == data.from_user\n                  );\n                  // Set the has_new_message status of the user to true\n                  this.$set(this.users, index, {\n                    ...this.users[index],\n                    has_new_message: true\n                  });\n                }\n\n                this.messages[data.channel].push({\n                  message: data.message,\n                  from_user: data.from_user,\n                  to_user: data.to_user,\n                  channel: data.channel\n                });\n              });\n            }\n          });\n\n                var presenceChannel = pusher.subscribe(\"presence-chitchat\");\n\n                presenceChannel.bind(\"pusher:member_added\", data => {\n                  // Get the index of user that just scubscribed\n                  const index = this.users.findIndex(user => user.id == data.id);\n\n                  // Set the is_online status of the user to true\n                  this.$set(this.users, index, { ...this.users[index], is_online: true });\n                });\n\n                presenceChannel.bind(\"pusher:member_removed\", data => {\n                  // Get the index of user that just subscribed\n                  const index = this.users.findIndex(user => user.id == data.id);\n\n                  // Set the is_online status of the user to false\n                  this.$set(this.users, index, {\n                    ...this.users[index],\n                    is_online: false\n                  });\n                });\n\n                presenceChannel.bind(\"pusher:subscription_succeeded\", data => {\n                  // Fetch members already on this channel, then set them to be online\n                  for (let member_id of Object.keys(data.members)) {\n                    const index = this.users.findIndex(user => user.id == member_id);\n                    this.$set(this.users, index, {\n                      ...this.users[index],\n                      is_online: true\n                    });\n                  }\n                });\n\n        },\n        getMessage: function(channel_name) {\n          this.axios\n            .get(`/api/get_message/${channel_name}`, {\n              headers: { Authorization: \"Bearer \" + this.token }\n            })\n            .then(response => {\n              this.$set(this.messages, channel_name, response.data);\n            });\n        },\n        chat: function(id) {\n          this.active_chat_id = id;\n\n          // Get index of the current chatting user...\n          this.active_chat_index = this.users.findIndex(\n            user => user.id == this.active_chat_id\n          );\n\n          // Set the has_new_message status of the user to true\n          this.$set(this.users, this.active_chat_index, {\n            ...this.users[this.active_chat_index],\n            has_new_message: false\n          });\n\n          this.axios\n            .post(\n              \"/api/request_chat\",\n              {\n                from_user: this.logged_user_id,\n                to_user: this.active_chat_id\n              },\n              { headers: { Authorization: \"Bearer \" + this.token } }\n            )\n            .then(response => {\n              this.users[this.active_chat_index][\"channel_name\"] =\n                response.data.channel_name;\n\n              this.current_chat_channel = response.data.channel_name;\n\n              // Get messages on this channel\n              this.getMessage(response.data.channel_name);\n\n              var isSubscribed = pusher.channel(response.data.channel_name);\n\n              if (!isSubscribed) {\n                var channel = pusher.subscribe(response.data.channel_name);\n\n                this.$set(this.messages, response.data.channel_name, []);\n\n                channel.bind(\"new_message\", data => {\n                 //Check if the current chat channel is where the message is comming from\n                  if (\n                    data.channel !== this.current_chat_channel &&\n                    data.from_user !== this.logged_user_id\n                  ) {\n                    // Set the has_new_message status of the user to true\n                    this.$set(this.users, this.active_chat_index, {\n                      ...this.users[this.active_chat_index],\n                      has_new_message: true\n                    });\n                  }\n\n                  this.messages[response.data.channel_name].push({\n                    message: data.message,\n                    from_user: data.from_user,\n                    to_user: data.to_user,\n                    channel: data.channel\n                  });\n                });\n              }\n            })\n            .catch(function(error) {\n              console.log(error);\n            });\n        },\n\n        send_message: function(message) {\n          this.axios.post(\n            \"/api/send_message\",\n            {\n              from_user: this.logged_user_id,\n              to_user: this.active_chat_id,\n              message: message,\n              channel: this.current_chat_channel\n            },\n            { headers: { Authorization: \"Bearer \" + this.token } }\n          );\n        },\n\n        },\n\n    };\n</script>\n\n<style>\n.messages-main {\n  overflow-y: scroll;\n  height: 90%;\n}\n.users {\n  padding: 10px !important;\n  border: 1px solid gray;\n}\n.no-margin {\n  margin: 0px;\n}\n.messages-area {\n  border: 1px solid gray;\n  padding-top: 20px;\n  max-height: calc(100vh - 4em) !important;\n}\n.input-message {\n  height: 40px;\n}\n.active {\n  background: #177199 !important;\n  border: #17a2b8 !important;\n}\n.select-chat {\n  margin-top: 35vh;\n  padding: 8px;\n}\n.main-area {\n  margin: 0px;\n  min-height: calc(100vh - 5em) !important;\n}\n.logged_user {\n  color: white;\n}\n</style>\n"]}]}