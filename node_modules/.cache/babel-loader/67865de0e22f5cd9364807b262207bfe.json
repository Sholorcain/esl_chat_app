{"remainingRequest":"C:\\Users\\Shane\\Desktop\\chat-app\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Shane\\Desktop\\chat-app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Shane\\Desktop\\chat-app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Shane\\Desktop\\chat-app\\src\\App.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Shane\\Desktop\\chat-app\\src\\App.vue","mtime":1596918578909},{"path":"C:\\Users\\Shane\\Desktop\\chat-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1596558536928},{"path":"C:\\Users\\Shane\\Desktop\\chat-app\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Shane\\Desktop\\chat-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1596558536928},{"path":"C:\\Users\\Shane\\Desktop\\chat-app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _objectSpread from \"C:\\\\Users\\\\Shane\\\\Desktop\\\\chat-app\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/objectSpread\";\nimport \"core-js/modules/es6.array.find-index\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Shane\\\\Desktop\\\\chat-app\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport MessageInput from \"./components/MessageInput.vue\";\nimport Messages from \"./components/Messages.vue\";\nimport NavBar from \"./components/NavBar.vue\";\nimport Login from \"./components/Login.vue\";\nimport Users from \"./components/Users.vue\";\nimport Topic from \"./components/Topic.vue\";\nimport modal from \"./components/modal.vue\";\nimport Pusher from \"pusher-js\"; // Declare pusher variable so it's global to this file.\n\nvar pusher;\nexport default {\n  name: \"app\",\n  components: {\n    MessageInput: MessageInput,\n    NavBar: NavBar,\n    Messages: Messages,\n    Users: Users,\n    Login: Login,\n    Topic: Topic,\n    modal: modal\n  },\n  data: function data() {\n    return {\n      authenticated: false,\n      messages: {},\n      users: [],\n      active_chat_id: null,\n      active_chat_index: null,\n      logged_user_id: null,\n      logged_user_username: null,\n      current_chat_channel: null,\n      isModalVisible: false\n    };\n  },\n  methods: {\n    setAuthenticated: function () {\n      var _setAuthenticated = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(login_status, user_data) {\n        var _this = this;\n\n        var users, notifications, presenceChannel;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // Update the states\n                this.logged_user_id = user_data.id;\n                this.logged_user_username = user_data.username;\n                this.authenticated = login_status;\n                this.token = user_data.token; // Initialize Pusher JavaScript library\n\n                pusher = new Pusher(process.env.VUE_APP_PUSHER_KEY, {\n                  cluster: process.env.VUE_APP_PUSHER_CLUSTER,\n                  authEndpoint: \"/api/pusher/auth\",\n                  auth: {\n                    headers: {\n                      Authorization: \"Bearer \" + this.token\n                    }\n                  }\n                }); // Get all the users from the server\n\n                _context.next = 7;\n                return this.axios.get(\"/api/users\", {\n                  headers: {\n                    Authorization: \"Bearer \" + this.token\n                  }\n                });\n\n              case 7:\n                users = _context.sent;\n                // Get all users excluding the current logged user\n                this.users = users.data.filter(function (user) {\n                  return user.userName != user_data.username;\n                });\n                notifications = pusher.subscribe(\"private-notification_user_\".concat(this.logged_user_id));\n                notifications.bind(\"new_chat\", function (data) {\n                  var isSubscribed = pusher.channel(data.channel_name);\n\n                  if (!isSubscribed) {\n                    var one_on_one_chat = pusher.subscribe(data.channel_name);\n\n                    _this.$set(_this.messages, data.channel_name, []);\n\n                    one_on_one_chat.bind(\"new_message\", function (data) {\n                      // Check if the current chat channel is where the message is coming from\n                      if (data.channel !== _this.current_chat_channel && data.from_user !== _this.logged_user_id) {\n                        // Get the index of the user that sent the message\n                        var index = _this.users.findIndex(function (user) {\n                          return user.id == data.from_user;\n                        }); // Set the has_new_message status of the user to true\n\n\n                        _this.$set(_this.users, index, _objectSpread({}, _this.users[index], {\n                          has_new_message: true\n                        }));\n                      }\n\n                      _this.messages[data.channel].push({\n                        message: data.message,\n                        from_user: data.from_user,\n                        to_user: data.to_user,\n                        channel: data.channel\n                      });\n                    });\n                  }\n                });\n                presenceChannel = pusher.subscribe(\"presence-chitchat\");\n                presenceChannel.bind(\"pusher:member_added\", function (data) {\n                  // Get the index of user that just scubscribed\n                  var index = _this.users.findIndex(function (user) {\n                    return user.id == data.id;\n                  }); // Set the is_online status of the user to true\n\n\n                  _this.$set(_this.users, index, _objectSpread({}, _this.users[index], {\n                    is_online: true\n                  }));\n                });\n                presenceChannel.bind(\"pusher:member_removed\", function (data) {\n                  // Get the index of user that just subscribed\n                  var index = _this.users.findIndex(function (user) {\n                    return user.id == data.id;\n                  }); // Set the is_online status of the user to false\n\n\n                  _this.$set(_this.users, index, _objectSpread({}, _this.users[index], {\n                    is_online: false\n                  }));\n                });\n                presenceChannel.bind(\"pusher:subscription_succeeded\", function (data) {\n                  // Fetch members already on this channel, then set them to be online\n                  var _arr = Object.keys(data.members);\n\n                  var _loop = function _loop() {\n                    var member_id = _arr[_i];\n\n                    var index = _this.users.findIndex(function (user) {\n                      return user.id == member_id;\n                    });\n\n                    _this.$set(_this.users, index, _objectSpread({}, _this.users[index], {\n                      is_online: true\n                    }));\n                  };\n\n                  for (var _i = 0; _i < _arr.length; _i++) {\n                    _loop();\n                  }\n                });\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function setAuthenticated(_x, _x2) {\n        return _setAuthenticated.apply(this, arguments);\n      };\n    }(),\n    getMessage: function getMessage(channel_name) {\n      var _this2 = this;\n\n      this.axios.get(\"/api/get_message/\".concat(channel_name), {\n        headers: {\n          Authorization: \"Bearer \" + this.token\n        }\n      }).then(function (response) {\n        _this2.$set(_this2.messages, channel_name, response.data);\n      });\n    },\n    chat: function chat(id) {\n      var _this3 = this;\n\n      this.active_chat_id = id; // Get index of the current chatting user...\n\n      this.active_chat_index = this.users.findIndex(function (user) {\n        return user.id == _this3.active_chat_id;\n      }); // Set the has_new_message status of the user to true\n\n      this.$set(this.users, this.active_chat_index, _objectSpread({}, this.users[this.active_chat_index], {\n        has_new_message: false\n      }));\n      this.axios.post(\"/api/request_chat\", {\n        from_user: this.logged_user_id,\n        to_user: this.active_chat_id\n      }, {\n        headers: {\n          Authorization: \"Bearer \" + this.token\n        }\n      }).then(function (response) {\n        _this3.users[_this3.active_chat_index][\"channel_name\"] = response.data.channel_name;\n        _this3.current_chat_channel = response.data.channel_name; // Get messages on this channel\n\n        _this3.getMessage(response.data.channel_name);\n\n        var isSubscribed = pusher.channel(response.data.channel_name);\n\n        if (!isSubscribed) {\n          var channel = pusher.subscribe(response.data.channel_name);\n\n          _this3.$set(_this3.messages, response.data.channel_name, []);\n\n          channel.bind(\"new_message\", function (data) {\n            //Check if the current chat channel is where the message is comming from\n            if (data.channel !== _this3.current_chat_channel && data.from_user !== _this3.logged_user_id) {\n              // Set the has_new_message status of the user to true\n              _this3.$set(_this3.users, _this3.active_chat_index, _objectSpread({}, _this3.users[_this3.active_chat_index], {\n                has_new_message: true\n              }));\n            }\n\n            _this3.messages[response.data.channel_name].push({\n              message: data.message,\n              from_user: data.from_user,\n              to_user: data.to_user,\n              channel: data.channel\n            });\n          });\n        }\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    send_message: function send_message(message) {\n      this.axios.post(\"/api/send_message\", {\n        from_user: this.logged_user_id,\n        to_user: this.active_chat_id,\n        message: message,\n        channel: this.current_chat_channel\n      }, {\n        headers: {\n          Authorization: \"Bearer \" + this.token\n        }\n      });\n    },\n    showModal: function showModal() {\n      this.isModalVisible = true;\n    },\n    closeModal: function closeModal() {\n      this.isModalVisible = false;\n    }\n  }\n};",{"version":3,"sources":["App.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div id=\"app\">\n    <Login v-if=\"!authenticated\" v-on:authenticated=\"setAuthenticated\" />\n    <b-container v-else>\n      <NavBar :logged_user=\"logged_user_username\" />\n      <b-row class=\"main-area\">\n        <b-col cols=\"3\" class=\"users\">\n          <Users :users=\"users\" v-on:chat=\"chat\" />\n          <Topic /><div class=\"test-button\"><p>Finished chatting?</p>\n              <button\n      type=\"button\"\n      class=\"btn\"\n      @click=\"showModal\"\n    >\n      Test yourself\n    </button>\n    </div>\n    <modal\n      v-show=\"isModalVisible\"\n      @close=\"closeModal\"\n    />\n        </b-col>\n        <b-col cols=\"9\" class=\"messages-area\">\n          <div class=\"messages-main\">\n            <div \n              v-if=\"!current_chat_channel\"\n              class=\"select-chat text-center\"\n            >\n              Select a user to start chatting, and click \"generate topic\" to select your conversation topic!\n            </div>\n\n            <Messages \n              v-else \n              :active_chat=\"active_chat_id\" \n              :messages=\"messages[current_chat_channel]\"\n            />\n          </div>\n          <MessageInput v-on:send_message=\"send_message\" />\n        </b-col>\n      </b-row>\n    </b-container>\n  </div>\n\n</template>\n\n<script>\nimport MessageInput from \"./components/MessageInput.vue\";\nimport Messages from \"./components/Messages.vue\";\nimport NavBar from \"./components/NavBar.vue\";\nimport Login from \"./components/Login.vue\";\nimport Users from \"./components/Users.vue\";\nimport Topic from \"./components/Topic.vue\";\nimport modal from \"./components/modal.vue\";\nimport Pusher from \"pusher-js\";\n\n// Declare pusher variable so it's global to this file.\nlet pusher;\n\nexport default {\n  name: \"app\",\n  components: {\n    MessageInput,\n    NavBar,\n    Messages,\n    Users,\n    Login,\n    Topic,\n    modal,\n  },\n      data: function() {\n        return {\n          authenticated: false,\n          messages: {},\n          users: [],\n          active_chat_id: null,\n          active_chat_index: null,\n          logged_user_id: null,\n          logged_user_username: null,\n          current_chat_channel: null,\n\n          isModalVisible: false,\n      };\n\n      },\n      methods: {\n        async setAuthenticated(login_status, user_data) {\n\n          // Update the states\n          this.logged_user_id = user_data.id;\n          this.logged_user_username = user_data.username;\n          this.authenticated = login_status;\n          this.token = user_data.token;\n\n          // Initialize Pusher JavaScript library\n          pusher = new Pusher(process.env.VUE_APP_PUSHER_KEY, {\n              cluster: process.env.VUE_APP_PUSHER_CLUSTER,\n              authEndpoint: \"/api/pusher/auth\",\n              auth: {\n                headers: {\n                  Authorization: \"Bearer \" + this.token\n                }\n              }\n          });\n\n          // Get all the users from the server\n          const users = await this.axios.get(\"/api/users\", {\n            headers: { Authorization: \"Bearer \" + this.token }\n          });\n\n          // Get all users excluding the current logged user\n          this.users = users.data.filter(\n            user => user.userName != user_data.username\n          );\n          var notifications = pusher.subscribe(\n            `private-notification_user_${this.logged_user_id}`\n          );\n\n          notifications.bind(\"new_chat\", data => {\n            const isSubscribed = pusher.channel(data.channel_name);\n            if (!isSubscribed) {\n              const one_on_one_chat = pusher.subscribe(data.channel_name);\n\n              this.$set(this.messages, data.channel_name, []);\n\n              one_on_one_chat.bind(\"new_message\", data => {\n                // Check if the current chat channel is where the message is coming from\n                if (\n                  data.channel !== this.current_chat_channel &&\n                  data.from_user !== this.logged_user_id\n                ) {\n                  // Get the index of the user that sent the message\n                  const index = this.users.findIndex(\n                    user => user.id == data.from_user\n                  );\n                  // Set the has_new_message status of the user to true\n                  this.$set(this.users, index, {\n                    ...this.users[index],\n                    has_new_message: true\n                  });\n                }\n\n                this.messages[data.channel].push({\n                  message: data.message,\n                  from_user: data.from_user,\n                  to_user: data.to_user,\n                  channel: data.channel\n                });\n              });\n            }\n          });\n\n                var presenceChannel = pusher.subscribe(\"presence-chitchat\");\n\n                presenceChannel.bind(\"pusher:member_added\", data => {\n                  // Get the index of user that just scubscribed\n                  const index = this.users.findIndex(user => user.id == data.id);\n\n                  // Set the is_online status of the user to true\n                  this.$set(this.users, index, { ...this.users[index], is_online: true });\n                });\n\n                presenceChannel.bind(\"pusher:member_removed\", data => {\n                  // Get the index of user that just subscribed\n                  const index = this.users.findIndex(user => user.id == data.id);\n\n                  // Set the is_online status of the user to false\n                  this.$set(this.users, index, {\n                    ...this.users[index],\n                    is_online: false\n                  });\n                });\n\n                presenceChannel.bind(\"pusher:subscription_succeeded\", data => {\n                  // Fetch members already on this channel, then set them to be online\n                  for (let member_id of Object.keys(data.members)) {\n                    const index = this.users.findIndex(user => user.id == member_id);\n                    this.$set(this.users, index, {\n                      ...this.users[index],\n                      is_online: true\n                    });\n                  }\n                });\n\n        },\n        getMessage: function(channel_name) {\n          this.axios\n            .get(`/api/get_message/${channel_name}`, {\n              headers: { Authorization: \"Bearer \" + this.token }\n            })\n            .then(response => {\n              this.$set(this.messages, channel_name, response.data);\n            });\n        },\n        chat: function(id) {\n          this.active_chat_id = id;\n\n          // Get index of the current chatting user...\n          this.active_chat_index = this.users.findIndex(\n            user => user.id == this.active_chat_id\n          );\n\n          // Set the has_new_message status of the user to true\n          this.$set(this.users, this.active_chat_index, {\n            ...this.users[this.active_chat_index],\n            has_new_message: false\n          });\n\n          this.axios\n            .post(\n              \"/api/request_chat\",\n              {\n                from_user: this.logged_user_id,\n                to_user: this.active_chat_id\n              },\n              { headers: { Authorization: \"Bearer \" + this.token } }\n            )\n            .then(response => {\n              this.users[this.active_chat_index][\"channel_name\"] =\n                response.data.channel_name;\n\n              this.current_chat_channel = response.data.channel_name;\n\n              // Get messages on this channel\n              this.getMessage(response.data.channel_name);\n\n              var isSubscribed = pusher.channel(response.data.channel_name);\n\n              if (!isSubscribed) {\n                var channel = pusher.subscribe(response.data.channel_name);\n\n                this.$set(this.messages, response.data.channel_name, []);\n\n                channel.bind(\"new_message\", data => {\n                 //Check if the current chat channel is where the message is comming from\n                  if (\n                    data.channel !== this.current_chat_channel &&\n                    data.from_user !== this.logged_user_id\n                  ) {\n                    // Set the has_new_message status of the user to true\n                    this.$set(this.users, this.active_chat_index, {\n                      ...this.users[this.active_chat_index],\n                      has_new_message: true\n                    });\n                  }\n\n                  this.messages[response.data.channel_name].push({\n                    message: data.message,\n                    from_user: data.from_user,\n                    to_user: data.to_user,\n                    channel: data.channel\n                  });\n                });\n              }\n            })\n            .catch(function(error) {\n              console.log(error);\n            });\n        },\n\n        send_message: function(message) {\n          this.axios.post(\n            \"/api/send_message\",\n            {\n              from_user: this.logged_user_id,\n              to_user: this.active_chat_id,\n              message: message,\n              channel: this.current_chat_channel\n            },\n            { headers: { Authorization: \"Bearer \" + this.token } }\n          );\n        },\n\n        showModal() {\n        this.isModalVisible = true;\n      },\n      closeModal() {\n        this.isModalVisible = false;\n      }\n\n        },\n\n    };\n</script>\n\n<style>\n.messages-main {\n  overflow-y: scroll;\n  height: 90%;\n}\n.users {\n  padding: 10px !important;\n  border: 1px solid gray;\n}\n.no-margin {\n  margin: 0px;\n}\n.messages-area {\n  border: 1px solid gray;\n  padding-top: 20px;\n  max-height: calc(100vh - 4em) !important;\n}\n.input-message {\n  height: 40px;\n}\n.active {\n  background: #177199 !important;\n  border: #17a2b8 !important;\n}\n.select-chat {\n  margin-top: 35vh;\n  padding: 8px;\n}\n.main-area {\n  margin: 0px;\n  min-height: calc(100vh - 5em) !important;\n}\n.logged_user {\n  color: white;\n}\n\n.test-button {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n}\n\n.btn {\n  background: #0390fc;\n  color: #fff;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n}\n</style>\n"],"sourceRoot":"src"}]}